source kern_log {
    file("/var/log/kern.log");
};

filter extract { match("memfini:" value("MESSAGE"));  };

parser generic_alloc {
    csv-parser(
        #prefix(".F5.")
        columns("", "", "PROC_NAME", "ALLOC_ADDR", "ALLOC_SIZE", "MEM_PERM", "MEM_FLAG", "MEM_FD")
        flags(strip-whitespace,greedy)
        delimiters(chars(","))
    );
};

parser mprotect {
    csv-parser(
        #prefix(".F5.")
        columns("", "", "PROC_NAME", "START_ADDR", "LENGTH", "MEM_PERM")
        flags(strip-whitespace,greedy)
        delimiters(chars(","))
    );
};

parser generic_memfini {
    csv-parser(
        #prefix(".F5.")
        columns("", "DATA_MEMFINI")
        flags(strip-whitespace,greedy)
        delimiters(chars(","))
    );
};




destination memfini_log_memalloc_rwx {
    file("/var/log/memfini.log" template("${DATE} Memory allocation done by process ${PROC_NAME} at address ${ALLOC_ADDR} of size ${ALLOC_SIZE} | Permission RWX | Flags ${MEM_FLAG}\n") persist-name("mem_alloc_rwx"));
};

destination memfini_log_memalloc_rw {
    file("/var/log/memfini.log" template("${DATE} Memory allocation done by process ${PROC_NAME} at address ${ALLOC_ADDR} of size ${ALLOC_SIZE} | Permission RW | Flags ${MEM_FLAG}\n") persist-name("mem_alloc_rw"));
};

destination memfini_log_memalloc_rx {
    file("/var/log/memfini.log" template("${DATE} Memory allocation done by process ${PROC_NAME} at address ${ALLOC_ADDR} of size ${ALLOC_SIZE} | Permission RX | Flags ${MEM_FLAG}\n") persist-name("mem_alloc_rx"));
};

destination memfini_log_memalloc_r {
    file("/var/log/memfini.log" template("${DATE} Memory allocation done by process ${PROC_NAME} at address ${ALLOC_ADDR} of size ${ALLOC_SIZE} | Permission R | Flags ${MEM_FLAG}\n") persist-name("mem_alloc_r"));
};

destination memfini_log_memalloc_wx {
    file("/var/log/memfini.log" template("${DATE} Memory allocation done by process ${PROC_NAME} at address ${ALLOC_ADDR} of size ${ALLOC_SIZE} | Permission WX | Flags ${MEM_FLAG}\n") persist-name("mem_alloc_wx"));
};

destination memfini_log_memalloc_x {
    file("/var/log/memfini.log" template("${DATE} Memory allocation done by process ${PROC_NAME} at address ${ALLOC_ADDR} of size ${ALLOC_SIZE} | Permission X | Flags ${MEM_FLAG}\n") persist-name("mem_alloc_x"));
};


destination memfini_log_memalloc_w {
    file("/var/log/memfini.log" template("${DATE} Memory allocation done by process ${PROC_NAME} at address ${ALLOC_ADDR} of size ${ALLOC_SIZE} | Permission W | Flags ${MEM_FLAG}\n") persist-name("mem_alloc_w"));
};

destination memfini_log_mprotect_rwx {
    file("/var/log/memfini.log" template("${DATE} Memory permission modified by process ${PROC_NAME} at address ${START_ADDR} of size ${LENGTH} | New Permission RWX\n") persist-name("mprotect_rwx"));
};

destination memfini_log_mprotect_rw {
    file("/var/log/memfini.log" template("${DATE} Memory permission modified by process ${PROC_NAME} at address ${START_ADDR} of size ${LENGTH} | New Permission RW\n") persist-name("mprotect_rw"));
};

destination memfini_log_mprotect_rx {
    file("/var/log/memfini.log" template("${DATE} Memory permission modified by process ${PROC_NAME} at address ${START_ADDR} of size ${LENGTH} | New Permission RX\n") persist-name("mprotect_rx"));
};

destination memfini_log_mprotect_r {
    file("/var/log/memfini.log" template("${DATE} Memory permission modified by process ${PROC_NAME} at address ${START_ADDR} of size ${LENGTH} | New Permission R\n") persist-name("mprotect_r"));
};

destination memfini_log_mprotect_wx {
    file("/var/log/memfini.log" template("${DATE} Memory permission modified by process ${PROC_NAME} at address ${START_ADDR} of size ${LENGTH} | New Permission WX\n") persist-name("mprotect_wx"));
};

destination memfini_log_mprotect_x {
    file("/var/log/memfini.log" template("${DATE} Memory permission modified by process ${PROC_NAME} at address ${START_ADDR} of size ${LENGTH} | New Permission X\n") persist-name("mprotect_x"));
};

destination memfini_log_mprotect_w {
    file("/var/log/memfini.log" template("${DATE} Memory permission modified by process ${PROC_NAME} at address ${START_ADDR} of size ${LENGTH} | New Permission W\n") persist-name("mprotect_w"));
};

destination memfini_log_mprotect {
    file("/var/log/memfini.log" template("${DATE} Memory permission modified by process ${PROC_NAME} at address ${START_ADDR} of size ${LENGTH} | New Permission NULL\n") persist-name("mprotect"));
};

destination memfini_log_all {
    file("/var/log/memfini.log" template("${DATE} ${DATA_MEMFINI}\n"));
};

#parser f5_vs_status {
    #csv-parser(
        #prefix(".F5.")
        #columns("F5_MCPD_ID", "F5_UNIX_TIME", "", "", "F5_VS_NAME", "", "", "F5_VS_STATUS")
        #flags(strip-whitespace,greedy)
        #delimiters(chars(" "))
        #quote-pairs('""')
    #);
#};hackintosh@antix1:~/project/memfini/testcases/demo1

log {
    source(kern_log);
    filter(extract);
    if (message('mem_alloc') and message('permission7')) {
        parser(generic_alloc);
        destination(memfini_log_memalloc_rwx);
    }
    elif (message('mem_alloc') and message('permission6')) {
        parser(generic_alloc);
        destination(memfini_log_memalloc_wx);
    }
    elif (message('mem_alloc') and message('permission5')) {
        parser(generic_alloc);
        destination(memfini_log_memalloc_rx);
    }
    elif (message('mem_alloc') and message('permission4')) {
        parser(generic_alloc);
        destination(memfini_log_memalloc_x);
    }
    elif (message('mem_alloc') and message('permission3')) {
        parser(generic_alloc);
        destination(memfini_log_memalloc_rw);
    }
    elif (message('mem_alloc') and message('permission2')) {
        parser(generic_alloc);
        destination(memfini_log_memalloc_w);
    }
    elif (message('mem_alloc') and message('permission1')) {
        parser(generic_alloc);
        destination(memfini_log_memalloc_r);
    }
    elif (message('mprotect') and message('permission7')) {
        parser(mprotect);
        destination(memfini_log_mprotect_rwx);
    }
    elif (message('mprotect') and message('permission6')) {
        parser(mprotect);
        destination(memfini_log_mprotect_wx);
    }
    elif (message('mprotect') and message('permission5')) {
        parser(mprotect);
        destination(memfini_log_mprotect_rx);
    }
    elif (message('mprotect') and message('permission4')) {
        parser(mprotect);
        destination(memfini_log_mprotect_x);
    }
    elif (message('mprotect') and message('permission3')) {
        parser(mprotect);
        destination(memfini_log_mprotect_rw);
    }
    elif (message('mprotect') and message('permission2')) {
        parser(mprotect);
        destination(memfini_log_mprotect_w);
    }
    elif (message('mprotect') and message('permission1')) {
        parser(mprotect);
        destination(memfini_log_mprotect_r);
    }
    elif (message('mprotect') and message('permission0')) {
        parser(mprotect);
        destination(memfini_log_mprotect);
    }
    else {
        parser(generic_memfini);
        destination(memfini_log_all);
    };
};
